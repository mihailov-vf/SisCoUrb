<?php
namespace Siscourb\Ticket\Form;

use Mockery;
use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-21 at 18:10:52.
 */
class TicketFormFactoryTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var TicketFormFactory
     */
    protected $ticketFormFactory;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->ticketFormFactory = new TicketFormFactory;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Siscourb\Ticket\Form\TicketFormFactory::createService
     */
    public function testCreateService()
    {
        $serviceManager = \Mockery::mock('Zend\ServiceManager\ServiceManager');
        $formManager = Mockery::mock('Zend\Form\FormElementManager');
        $formManager->shouldReceive('getServiceLocator')
                ->once()
                ->andReturn($serviceManager);
        
        $user = \Mockery::mock(new \Siscourb\User\Entity\User());

        $zfcAuth = \Mockery::mock('Zend\Authentication\AuthenticationService')->makePartial();
        $serviceManager->shouldReceive('get')
                ->with('zfcuser_auth_service')
                ->once()->andReturn($zfcAuth);
        $zfcAuth->shouldReceive('getIdentity')->once()->andReturn($user);
        
        $ticketFieldset = Mockery::mock('Siscourb\Ticket\Form\TicketFieldset')->makePartial();
        $formManager->shouldReceive('get')
                ->with('Siscourb\Ticket\Form\TicketFieldset')
                ->once()
                ->andReturn($ticketFieldset);
        
        $this->assertInstanceOf(
            '\Siscourb\Ticket\Form\TicketForm',
            $this->ticketFormFactory->createService($formManager)
        );
    }
}
