<?php

namespace Siscourb\Ticket\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use Mockery;
use PHPUnit_Framework_TestCase;
use Siscourb\Ticket\Entity\Ticket;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-20 at 16:04:44.
 */
class TicketRepositoryTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var EntityManager
     */
    protected $entityManager;

    /**
     * @var TicketRepository
     */
    protected $ticketRepository;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->entityManager = Mockery::mock('Doctrine\ORM\EntityManager');
        $metadata = new ClassMetadata('Siscourb\Ticket\Entity\Ticket');

        $this->ticketRepository = new TicketRepository($this->entityManager, $metadata);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Siscourb\Ticket\Repository\TicketRepository::insert
     * @dataProvider createTicket
     */
    public function testInsert(Ticket $ticket)
    {
        $this->entityManager->shouldReceive('persist')->with($ticket)->andReturn(null);
        $this->entityManager->shouldReceive('flush')->with($ticket)->andReturn(null);
        
        $returnedTicket = $this->ticketRepository->insert($ticket);
        
        $this->assertEquals($ticket, $returnedTicket);
        $this->assertInstanceOf('Siscourb\Ticket\Entity\Ticket', $returnedTicket);
    }

    /**
     * @covers Siscourb\Ticket\Repository\TicketRepository::update
     * @dataProvider createTicket
     */
    public function testUpdate(Ticket $ticket)
    {
        $this->entityManager->shouldReceive('flush')->with($ticket)->andReturn(null);
        
        $returnedTicket = $this->ticketRepository->update($ticket);
        
        $this->assertEquals($ticket, $returnedTicket);
        $this->assertInstanceOf('Siscourb\Ticket\Entity\Ticket', $returnedTicket);
    }

    /**
     * @covers Siscourb\Ticket\Repository\TicketRepository::delete
     * @dataProvider createTicket
     */
    public function testDelete(Ticket $ticket)
    {
        $this->entityManager->shouldReceive('remove')->with($ticket)->andReturn(null);
        $this->entityManager->shouldReceive('flush')->with($ticket)->andReturn(null);
        
        $this->ticketRepository->delete($ticket);
    }

    public function createTicket()
    {
        $ticket = Mockery::mock('Siscourb\Ticket\Entity\Ticket')->makePartial();
        
        return array(array($ticket));
    }
}
