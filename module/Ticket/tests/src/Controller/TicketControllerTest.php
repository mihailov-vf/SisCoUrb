<?php

namespace Siscourb\Ticket\Controller;

use Mockery;
use Mockery\Mock;
use PHPUnit_Framework_TestCase;
use Siscourb\Ticket\Form\TicketForm;
use Siscourb\Ticket\Repository\TicketRepository;
use Zend\Mvc\Controller\PluginManager;
use Zend\View\Model\ViewModel;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-20 at 16:32:46.
 */
class TicketControllerTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var TicketController
     */
    protected $ticketController;

    /**
     * @var TicketRepository|Mock
     */
    protected $ticketMapper;

    /**
     * @var TicketForm|Mock
     */
    protected $ticketForm;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->ticketMapper = Mockery::mock('Siscourb\Ticket\Repository\TicketRepository');
        $this->ticketForm = Mockery::mock('Siscourb\Ticket\Form\TicketForm');
        $this->ticketController = new TicketController($this->ticketMapper, $this->ticketForm);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Siscourb\Ticket\Controller\TicketController::__construct
     */
    public function testConstruction()
    {
        $this->assertAttributeInstanceOf(
            'Siscourb\Ticket\Repository\TicketRepository',
            'ticketMapper',
            $this->ticketController
        );

        $this->assertAttributeInstanceOf(
            'Siscourb\Ticket\Form\TicketForm',
            'ticketForm',
            $this->ticketController
        );
    }

    /**
     * @covers Siscourb\Ticket\Controller\TicketController::listAction
     */
    public function testListAction()
    {
        $this->ticketMapper->shouldReceive('findAll')->once()->andReturn(array());

        $expected = array('tickets' => array());
        $this->assertEquals($expected, $this->ticketController->listAction());
    }

    /**
     * @covers Siscourb\Ticket\Controller\TicketController::addAction
     */
    public function testAddActionReturnForm()
    {
        $expected = new ViewModel(array('form' => $this->ticketForm));
        $this->assertEquals($expected, $this->ticketController->addAction());
    }

    /**
     * @covers Siscourb\Ticket\Controller\TicketController::addAction
     */
    public function testAddActionReturnFormIfInvalidData()
    {
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );

        $model = Mockery::mock(new ViewModel([
                'form' => $this->ticketForm
        ]));

        $pluginManager = $this->pluginManager();
        $prg = $this->prg($pluginManager);
        $flashMessenger = $this->flashMessenger($pluginManager);

        $this->ticketForm->shouldReceive('setData')->once()->andReturn(null);
        $this->ticketForm->shouldReceive('isValid')->once()->andReturn(false);

        $flashMessenger->shouldReceive('addErrorMessage')
            ->with('Os dado providenciados não são válidos')
            ->once();

        $model->shouldReceive('setVariable')->with('form', $this->ticketForm)->once();

        $this->ticketController->addAction();
    }

    /**
     * @covers Siscourb\Ticket\Controller\TicketController::addAction
     * @todo   Implement testCreateAction().
     */
    public function testCreateAction()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Siscourb\Ticket\Controller\TicketController::saveAction
     * @todo   Implement testSaveAction().
     */
    public function testSaveAction()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Siscourb\Ticket\Controller\TicketController::viewAction
     * @todo   Implement testViewAction().
     */
    public function testViewAction()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Siscourb\Ticket\Controller\TicketController::addNoteAction
     * @todo   Implement testAddNoteAction().
     */
    public function testAddNoteAction()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Siscourb\Ticket\Controller\TicketController::editAction
     * @todo   Implement testEditAction().
     */
    public function testEditAction()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Siscourb\Ticket\Controller\TicketController::closeAction
     * @todo   Implement testCloseAction().
     */
    public function testCloseAction()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @return PluginManager
     */
    protected function pluginManager()
    {

        $pluginManager = Mockery::mock('Zend\Mvc\Controller\PluginManager');
        $pluginManager->shouldReceive('setController')->andReturn(Mockery::self());

        $this->ticketController->setPluginManager($pluginManager);

        return $pluginManager;
    }

    /**
     * @param PluginManager $pluginManager
     * @return Zend\Mvc\Controller\Plugin\PostRedirectGet
     */
    protected function prg(PluginManager $pluginManager = null)
    {
        if (empty($pluginManager)) {
            $pluginManager = $this->pluginManager();
        }

        $prg = new \Zend\Mvc\Controller\Plugin\PostRedirectGet();
        $prg->setController($this->ticketController);

        $pluginManager->shouldReceive('get')
            ->with('prg', Mockery::any())
            ->andReturn($prg)
            ->once();

        return $prg;
    }

    /**
     * @param PluginManager $pluginManager
     * @return \Zend\Mvc\Controller\Plugin\FlashMessenger
     */
    protected function flashMessenger(PluginManager $pluginManager = null)
    {
        if (empty($pluginManager)) {
            $pluginManager = $this->pluginManager();
        }

        $flashMessenger = Mockery::mock('Zend\Mvc\Controller\Plugin\FlashMessenger');

        $pluginManager->shouldReceive('get')
            ->with('flashMessenger', Mockery::any())
            ->andReturn($flashMessenger)
            ->once();

        return $flashMessenger;
    }
}
