<?php

namespace Siscourb\User\Entity;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-01 at 14:24:48.
 */
class UserTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var User
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new User;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testGetAndSetId()
    {
        $this->assertEmpty($this->object->getId());

        $this->object->setId(3);
        $this->assertEquals(3, $this->object->getId());
    }

    public function testGetAndSetUsername()
    {
        $this->assertEmpty($this->object->getUsername());

        $this->object->setUsername('joe');
        $this->assertEquals('joe', $this->object->getUsername());
    }

    public function testGetAndSetEmail()
    {
        $this->assertEmpty($this->object->getEmail());

        $this->object->setEmail('joe@joe.com');
        $this->assertEquals('joe@joe.com', $this->object->getEmail());
    }

    public function testGetAndSetDisplayName()
    {
        $this->assertEmpty($this->object->getDisplayname());

        $this->object->setDisplayName('Joe');
        $this->assertEquals('Joe', $this->object->getDisplayName());
    }

    public function testGetAndSetPassword()
    {
        $this->assertEmpty($this->object->getPassword());

        $this->object->setPassword('Joe');
        $this->assertEquals('Joe', $this->object->getPassword());
    }

    public function testGetAndSetState()
    {
        $this->assertEmpty($this->object->getState());

        $this->object->setState(1);
        $this->assertEquals(1, $this->object->getState());
    }

    public function testAddRole()
    {
        $this->assertEmpty($this->object->getRoles());

        $role = \Mockery::mock(new Role());
        $role->setId(2);
        $role->setRoleId('user');

        $role2 = \Mockery::mock(new Role());
        $role2->setId(4);
        $role2->setRoleId('admin');

        $this->object->addRole($role);
        $roles = $this->object->getRoles();
        $this->assertContainsOnlyInstancesOf($role, $roles);
        $this->assertCount(1, $roles);

        $this->object->addRole($role2);
        $roles = $this->object->getRoles();
        $this->assertCount(2, $roles);
    }
}
